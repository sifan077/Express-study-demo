#!/usr/bin/env node

/**
 * 模块依赖
 */
const app = require('../app');
const debug = require('debug')('express-study-demo:server');
const http = require('http');

/**
 * 从环境获得端口在表达和存储。
 */
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * 创建 Http 服务
 */
const server = http.createServer(app);

/**
 * 监听端口,提供所有网络接口。
 */

server.listen(port, () => {
    console.log("express server running on http://127.0.0.1:" + port)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * 端口规范化为一个数字,字符串,或布尔类型。
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * 事件监听器，当Http服务出现错误的情况下
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * 为HTTP服务器“listening”事件事件监听器。
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
